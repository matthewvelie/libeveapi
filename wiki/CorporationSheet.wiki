=== Description ===
Retrieves a detailed description of a corporation.

=== Library Methods ===
{{{
/// <summary>
/// Returns a detailed description of a character's corporation
/// </summary>
/// <param name="userId">userId of account for authentication</param>
/// <param name="characterId">CharacterId of character for authentication</param>
/// <param name="apiKey">Limited access API key of account</param>
/// <returns></returns>
public static CorporationSheet GetCorporationSheet(int userId, int characterId, string apiKey)

/// <summary>
/// Returns a detailed description of any corporation
/// </summary>
/// <param name="userId">userId of account for authentication</param>
/// <param name="characterId">CharacterId of character for authentication</param>
/// <param name="apiKey">Limited access API key of account</param>
/// <param name="corporationId">retrieve information on the corporation with this id</param>
/// <returns></returns>
public static CorporationSheet GetCorporationSheet(int userId, int characterId, string apiKey, string corporationId)
}}}

=== Result ===
* !CorporationSheet class (See ApiResult for inherited members) *
|| Member || Type || Description ||
|| !CoporationId || int || Unique identifier for the corporation ||
|| !CorporationName || string || Name of the corporation ||
|| Ticker || string || Stock ticker symbol for the corporation ||
|| !CeoId || int || The characterId of the character that is CEO of the corporation ||
|| !CeoName || string || The name of the character that is CEO of the corporation ||
|| !StationId || int || The unique id of the station where the corporation is based ||
|| !StationName || string || The name of the station where the corporation is based ||
|| Description || string || A description of the corporation as set by the corporation ||
|| !Url || string || A url to the corporation's web site ||
|| !AllianceId || int || The unique identifier of this corporation's alliance ||
|| !AllianceName || string || The name of this corporation's alliance ||
|| !TaxRate || double || The tax rate of the corporation ||
|| !MemberCount || int || The current number of pilots in the corporation ||
|| !MemberLimit || int || The current maximum number of pilots the corporation can contain ||
|| Shares || int || The current number of outstanding shares of the corporation ||
|| Divisions || Division[] || ||
|| !WalletDivisions[] || !WalletDivision || ||
|| Logo || !CorpLogo || An object describing the corporation logo ||

* !CorporationSheet.Division class *
|| *Member* || *Type* || *Description* ||
|| !AccountKey || int || ||
|| Description || string || ||

* !CorporationSheet.!WalletDivision class *
|| *Member* || *Type* || *Description* ||
|| !AccountKey || int || ||
|| Description || string || ||


* !CorporationSheet.!CorpLogo class *
|| *Member* || *Type* || *Description* ||
|| !GraphicId || int || ||
|| Shape1 || int || ||
|| Shape2 || int || ||
|| Shape3 || int || ||
|| Color1 || int || ||
|| Color2 || int || ||
|| Color3 || int || ||

=== Example ===
{{{
public static void CorporationSheetExample()
{
    CorporationSheet corporationSheet = EveApi.GetCorporationSheet(123, 456, "apiKey");
    Console.WriteLine("Corporation Name: {0} Ticker: {1}", corporationSheet.CorporationName, corporationSheet.Ticker);
    Console.WriteLine("Logo GraphicId: {0}", corporationSheet.Logo.GraphicId);

    foreach (CorporationSheet.Division division in corporationSheet.Divisions)
    {
        Console.WriteLine("Division AccountKey: {0} Description: {1}", division.AccountKey, division.Description);
    }

    foreach (CorporationSheet.WalletDivision walletDivision in corporationSheet.WalletDivisions)
    {
        Console.WriteLine("Wallet Division AccountKey: {0} Description: {1}", walletDivision.AccountKey, walletDivision.Description);
    }
}
}}}